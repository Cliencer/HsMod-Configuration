@inherits LayoutComponentBase
@inject Configuration conf
@inject ISnackbar Snackbar
@using System.Timers
<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">HsMod 插件管理器</MudText>
        <MudSpacer />
        <MudTooltip Text="刷新设置" Arrow="true">
            <MudIconButton Disabled="@(!Configuration.login)" Icon="@Icons.Material.Outlined.Refresh" Color="Color.Inherit" OnClick="@refresh" />
        </MudTooltip>
        <MudTooltip Text="保存设置" Arrow="true">
            <MudIconButton Disabled="@(!Configuration.login)" Icon="@(Icons.Material.Outlined.Save)" Color="Color.Inherit" OnClick="@Save"/>
        </MudTooltip>
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Edge="Edge.End" OnClick="@GoGithub" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>

</MudLayout>


<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {

    private bool _drawerOpen = true;
    private bool _isDarkMode = false;
    private MudTheme? _theme = null;
    private Timer timer = new Timer(3000);
    protected override void OnInitialized()
    {
        base.OnInitialized();

        _theme = new()
            {
                PaletteLight = _lightPalette,
                PaletteDark = _darkPalette,
                LayoutProperties = new LayoutProperties()
            };
        timer.Elapsed += Timer_Elapsed;
        timer.Start();
    }

    async public Task refresh()
    {
        await Configuration.getGamePath();
        await Configuration.getAlive();
        
        if (Configuration.login)
        {
            await Configuration.getHsmodCfg();
            await Configuration.getSkinsData();

            
        }
        StateHasChanged(); // 触发组件重新渲染
    }
 
    async private void Save()
    {
        await Configuration.save();
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        var a = Snackbar.Add("保存成功", Severity.Success, config =>
        {
            config.RequireInteraction = true;
            config.ShowCloseIcon = false;

        });
        await Task.Delay(5000);
        a.ForceClose();
    }
    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }
    private async Task GoGithub(){
        try
        {
            Uri uri = new Uri("https://github.com/Cliencer/HsMod-Configuration");
            await Browser.Default.OpenAsync(uri, BrowserLaunchMode.SystemPreferred);
        }
        catch (Exception ex)
        {
            // An unexpected error occurred. No browser may be installed on the device.
        }
    }
    private readonly PaletteLight _lightPalette = new()
        {
            Black = "#110e2d",
            AppbarText = "#424242",
            AppbarBackground = "rgba(255,255,255,0.8)",
            DrawerBackground = "#ffffff",
            GrayLight = "#e8e8e8",
            GrayLighter = "#f9f9f9",
        };

    private readonly PaletteDark _darkPalette = new()
        {
            Primary = "#7e6fff",
            Surface = "#1e1e2d",
            Background = "#1a1a27",
            BackgroundGray = "#151521",
            AppbarText = "#92929f",
            AppbarBackground = "rgba(26,26,39,0.8)",
            DrawerBackground = "#1a1a27",
            ActionDefault = "#74718e",
            ActionDisabled = "#9999994d",
            ActionDisabledBackground = "#605f6d4d",
            TextPrimary = "#b2b0bf",
            TextSecondary = "#92929f",
            TextDisabled = "#ffffff33",
            DrawerIcon = "#92929f",
            DrawerText = "#92929f",
            GrayLight = "#2a2833",
            GrayLighter = "#1e1e2d",
            Info = "#4a86ff",
            Success = "#3dcb6c",
            Warning = "#ffb545",
            Error = "#ff3f5f",
            LinesDefault = "#33323e",
            TableLines = "#33323e",
            Divider = "#292838",
            OverlayLight = "#1e1e2d80",
        };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Outlined.LightMode,
        false => Icons.Material.Outlined.DarkMode,
    };
    private void Timer_Elapsed(object sender, ElapsedEventArgs e)
    {
        if (Configuration.login)
        {
            InvokeAsync(async() =>{
            
                await Configuration.getAlive();
                StateHasChanged();
            
        });
        }
    }
}


