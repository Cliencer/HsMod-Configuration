# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Build and Publish

on:
  workflow_dispatch:

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.x
    - name: Restore dependencies
      run: dotnet restore --locked-mode
      
    - name: Build project
      run: dotnet build --configuration Release --no-restore
      
    - name: Publish project
      run: |
        # 针对具体的项目文件而不是解决方案进行发布
        # 指定目标框架
        dotnet publish ./HsmodConfiguration/HsmodConfiguration.csproj \
          --configuration Release \
          --framework net8.0-windows10.0.19041.0 \
          --output ./published \
          --no-build
      
    - name: Create ZIP package
      run: zip -r HsModConfiguration.zip published/
      
    - name: Generate release tag
      id: tag
      run: |
        Get-Content ./HsmodConfiguration/HsmodConfiguration.csproj | Select-String -Pattern '<ApplicationDisplayVersion>(.*?)</ApplicationDisplayVersion>' | ForEach-Object { ($_ -match '"(.*?)"') | Out-Null }
        $version = $matches[1];
        echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      env:
        CURRENT_TAG: ${{ steps.tag.outputs.VERSION }}
      with:
        tag_name: ${{ steps.tag.outputs.VERSION }}
        files: ./HsModConfiguration.zip
        prerelease: false
        make_latest: true
        generate_release_notes: true
